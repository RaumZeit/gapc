
%{


#include <locale>
#include <iostream>
#include <string>
#include "lit_parse.hh"


/*
"//" { BEGIN SKIP_LINE; }
<SKIP_LINE>{
\n { new_line(yylloc); BEGIN INITIAL; }
[^\n]+ ;
}
*/

static int curly;

%}

%option noyywrap
%option yylineno

%x IN_HEADER
%x IN_GRAMMAR
%x IN_BODY
%x SKIP_CODE
%x SKIP_COMMENT

%%


^"/**{"$ { BEGIN IN_HEADER; }
. ;
\n ;

<IN_HEADER>{

^"**/"$ { std::cout << "\\begin{lstlisting}\n"; BEGIN IN_GRAMMAR; }
. { std::cout << yytext; }
\n { std::cout << yytext; }

}

<IN_GRAMMAR>{

[A-Z]+_?[A-Z]+ {
          std::locale loc;
          std::string s(yytext);
          std::use_facet<std::ctype<char> >(loc).tolower(&*s.begin(),&*s.end());
          yylval.sval = new std::string(s);
          return TERMINAL; 
        }
'.' { yylval.sval = new std::string(yytext); return TOKEN; }
"{" { curly++; BEGIN SKIP_CODE; }
"/**/" { return LINE_BREAK; }
^"/**}"$ { std::cout << "\\end{lstlisting}\n"; BEGIN IN_BODY; }
"/*" { BEGIN SKIP_COMMENT; }
[:;|] { return *yytext; }
[^ \t\n:|]+ { yylval.sval = new std::string(yytext); return TOKEN; }
\n ;
[ \t]+ ;

}

<SKIP_CODE>{
"{" { curly++; }
"}" { curly--; if (!curly) BEGIN IN_GRAMMAR; }
. ;
\n ;
}


<SKIP_COMMENT>{
"*/" { BEGIN IN_GRAMMAR; }
[^*\n]+ ;
"*" ;
\n ;
}


<IN_BODY>{

^"**/"$ { BEGIN INITIAL; }
. { std::cout << yytext; }
\n { std::cout << yytext; }

}



%%

int yyparse(void);

int main()
{
  std::cout << "% Autogenerated by literate.l\n";
  //while (yylex());
  yyparse();
  return 0;
}

